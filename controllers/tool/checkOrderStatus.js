const cron = require('node-cron');
const Order = require('../../models/Order');
const Service = require('../../models/server'); // ƒê·∫£m b·∫£o ƒë√∫ng t√™n file model
const SmmSv = require('../../models/SmmSv');
const SmmApiService = require('../Smm/smmServices');
const User = require('../../models/User'); // Th√™m d√≤ng n√†y ·ªü ƒë·∫ßu file ƒë·ªÉ import model User
const HistoryUser = require('../../models/History');
const axios = require('axios');

function mapStatus(apiStatus) {
  switch (apiStatus) {
    case "Pending":
      return "Pending";
    case "Processing":
      return "Processing";
    case "Completed":
      return "Completed";
    case "In progress":
      return "In progress";
    case "Partial":
      return "Partial";
    case "Canceled":
      return "Canceled";
    default:
      return null;
  }
}

async function checkOrderStatus() {
  try {
    const runningOrders = await Order.find({
      status: { $in: ["Pending", "In progress", "Processing"] }
    });
    if (runningOrders.length === 0) {
      console.log("Kh√¥ng c√≥ ƒë∆°n h√†ng ƒëang ch·∫°y.");
      return;
    }
    console.log(`ƒêang ki·ªÉm tra tr·∫°ng th√°i c·ªßa ${runningOrders.length} ƒë∆°n h√†ng...`);

    // Cache cho Service v√† SmmSv ƒë·ªÉ tr√°nh truy v·∫•n l·∫∑p l·∫°i
    const serviceCache = {};
    const smmConfigCache = {};
    const groups = {};

    for (const order of runningOrders) {
      // Cache Service
      let service = serviceCache[order.SvID];
      if (!service) {
        service = await Service.findOne({ serviceId: order.SvID });
        if (!service) {
          console.warn(`Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• cho ƒë∆°n ${order.Madon} (namesv: ${order.namesv})`);
          continue;
        }
        serviceCache[order.SvID] = service;
      }

      // Cache SmmSv
      let smmConfig = smmConfigCache[service.DomainSmm];
      if (!smmConfig) {
        smmConfig = await SmmSv.findOne({ name: service.DomainSmm });
        if (!smmConfig || !smmConfig.url_api || !smmConfig.api_token) {
          console.warn(`C·∫•u h√¨nh SMM kh√¥ng h·ª£p l·ªá cho d·ªãch v·ª• ${service.name}`);
          continue;
        }
        smmConfigCache[service.DomainSmm] = smmConfig;
      }

      const groupKey = smmConfig._id.toString();
      if (!groups[groupKey]) {
        groups[groupKey] = {
          smmService: new SmmApiService(smmConfig.url_api, smmConfig.api_token),
          orders: [],
        };
      }
      groups[groupKey].orders.push(order);
    }

    // Duy·ªát qua t·ª´ng nh√≥m v√† g·ªçi API ki·ªÉm tra tr·∫°ng th√°i
    for (const groupKey in groups) {
      const { smmService, orders } = groups[groupKey];

      if (orders.length === 1) {
        const order = orders[0];
        try {
          const statusObj = await smmService.status(order.orderId);
          console.log(`API tr·∫£ v·ªÅ cho ƒë∆°n ${order.orderId}:`, statusObj);

          const mappedStatus = mapStatus(statusObj.status);
          if (mappedStatus !== null) order.status = mappedStatus;
          if (statusObj.start_count !== undefined) order.start = statusObj.start_count;
          if (
            ['Pending', 'In progress', 'Processing'].includes(mappedStatus) &&
            Number(statusObj.remains) === 0
          ) {
            order.dachay = 0;
          } else if (statusObj.remains !== undefined) {
            order.dachay = order.quantity - Number(statusObj.remains);
          }
          const user = await User.findOne({ username: order.username });
          const tiencu = user.balance || 0;
          if (mappedStatus === 'Partial') {
            if (user) {
              const soTienHoan = ((statusObj.remains || 0) * order.rate) - 1000; // Gi·∫£ s·ª≠ 1000 l√† ph√≠ d·ªãch v·ª•
              if ((soTienHoan) < 0) return;
              user.balance = (user.balance || 0) + soTienHoan;
              await user.save();
              const historyData = new HistoryUser({
                username: order.username,
                madon: "null",
                hanhdong: "Ho√†n ti·ªÅn",
                link: "",
                tienhientai: tiencu,
                tongtien: soTienHoan,
                tienconlai: user.balance,
                createdAt: new Date(),
                mota: `H·ªá th·ªëng ho√†n cho b·∫°n ${soTienHoan} d·ªãch v·ª• t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ${statusObj.remains} cho uid ${order.link} v√† 1000 ph√≠ d·ªãch v·ª•`,
              });
              const taoluc = new Date();
              const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
              const telegramChatId = process.env.TELEGRAM_CHAT_ID;
              if (telegramBotToken && telegramChatId) {
                const telegramMessage =
                  `üìå *TH√îNG B√ÅO HO√ÄN TI·ªÄN!*\n\n` +
                  `üë§ *Kh√°ch h√†ng:* ${order.username}\n` +
                  `üí∞ *S·ªë ti·ªÅn ho√†n:* ${soTienHoan}\n` +
                  `üîπ *T∆∞·ªõng ·ª©ng s·ªë l∆∞·ª£ng:* ${statusObj.remains} Rate : ${order.rate}\n` +
                  `‚è∞ *Th·ªùi gian:* ${taoluc.toLocaleString()}\n`;
                try {
                  await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                    chat_id: telegramChatId,
                    text: telegramMessage,
                    parse_mode: "Markdown",
                  });
                  console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
                } catch (telegramError) {
                  console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
                }
              }
              await historyData.save();
              console.log(`ƒê√£ ho√†n ti·ªÅn cho user ${user.username} s·ªë ti·ªÅn ${soTienHoan} do ƒë∆°n ${order.Madon} b·ªã h·ªßy ho·∫∑c ch·∫°y thi·∫øu.`);
            }
          }
          if (mappedStatus === 'Canceled') {
            if (user) {
              const soTienHoan = ((order.quantity || 0) * order.rate) - 1000; // Gi·∫£ s·ª≠ 1000 l√† ph√≠ d·ªãch v·ª•
              if ((soTienHoan) < 0) return;
              user.balance = (user.balance || 0) + soTienHoan;
              await user.save();
              const historyData = new HistoryUser({
                username: order.username,
                madon: "null",
                hanhdong: "Ho√†n ti·ªÅn",
                link: "",
                tienhientai: tiencu,
                tongtien: soTienHoan,
                tienconlai: user.balance,
                createdAt: new Date(),
                mota: `H·ªá th·ªëng ho√†n cho b·∫°n ${soTienHoan} d·ªãch v·ª• t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ${order.quantity} cho uid ${order.link} v√† 1000 ph√≠ d·ªãch v·ª•`,
              });
              const taoluc = new Date();
              const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
              const telegramChatId = process.env.TELEGRAM_CHAT_ID;
              if (telegramBotToken && telegramChatId) {
                const telegramMessage =
                  `üìå *TH√îNG B√ÅO HO√ÄN TI·ªÄN!*\n\n` +
                  `üë§ *Kh√°ch h√†ng:* ${order.username}\n` +
                  `üí∞ *S·ªë ti·ªÅn ho√†n:* ${soTienHoan}\n` +
                  `üîπ *T∆∞·ªõng ·ª©ng s·ªë l∆∞·ª£ng:* ${order.quantity} Rate : ${order.rate}\n` +
                  `‚è∞ *Th·ªùi gian:* ${taoluc.toLocaleString()}\n`;
                try {
                  await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                    chat_id: telegramChatId,
                    text: telegramMessage,
                    parse_mode: "Markdown",
                  });
                  console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
                } catch (telegramError) {
                  console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
                }
              }
              await historyData.save();
              console.log(`ƒê√£ ho√†n ti·ªÅn cho user ${user._id} s·ªë ti·ªÅn ${soTienHoan} do ƒë∆°n ${order.Madon} b·ªã h·ªßy ho·∫∑c ch·∫°y thi·∫øu.`);
            }
          }
          await order.save();
          console.log(`ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n ${order.Madon}: status = ${order.status}, dachay = ${order.dachay}`);
        } catch (apiError) {
          console.error(`L·ªói API tr·∫°ng th√°i cho ƒë∆°n ${order.orderId}:`, apiError.message);
        }
      } else {
        // Multi status
        const orderIds = orders.map(order => order.orderId);
        try {
          const data = await smmService.multiStatus(orderIds);
          console.log(`API tr·∫£ v·ªÅ cho c√°c ƒë∆°n:`, data);

          for (const orderId in data) {
            if (data.hasOwnProperty(orderId)) {
              const statusObj = data[orderId];
              const order = orders.find(o => o.orderId.toString() === orderId);
              if (order) {
                const mappedStatus = mapStatus(statusObj.status);
                if (mappedStatus !== null) order.status = mappedStatus;
                if (statusObj.start_count !== undefined) order.start = statusObj.start_count;
                if (
                  ['Pending', 'In progress', 'Processing'].includes(mappedStatus) &&
                  Number(statusObj.remains) === 0
                ) {
                  order.dachay = 0;
                } else if (statusObj.remains !== undefined) {
                  order.dachay = order.quantity - Number(statusObj.remains);
                }
                // N·∫øu tr·∫°ng th√°i l√† Canceled th√¨ ho√†n ti·ªÅn
                const user = await User.findOne({ username: order.username });
                const tiencu = user.balance || 0;
                // N·∫øu tr·∫°ng th√°i l√† Canceled ho·∫∑c Partial th√¨ ho√†n ti·ªÅn ph·∫ßn c√≤n l·∫°i
                if (mappedStatus === 'Partial') {
                  if (user) {
                    const soTienHoan = ((statusObj.remains || 0) * order.rate) - 1000; // Gi·∫£ s·ª≠ 1000 l√† ph√≠ d·ªãch v·ª•
                    if ((soTienHoan) < 0) return;
                    user.balance = (user.balance || 0) + soTienHoan;
                    await user.save();
                    const historyData = new HistoryUser({
                      username: order.username,
                      madon: "null",
                      hanhdong: "Ho√†n ti·ªÅn",
                      link: "",
                      tienhientai: tiencu,
                      tongtien: soTienHoan,
                      tienconlai: user.balance,
                      createdAt: new Date(),
                      mota: `H·ªá th·ªëng ho√†n cho b·∫°n ${soTienHoan} d·ªãch v·ª• t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ${statusObj.remains} cho uid ${order.link} v√† 1000 ph√≠ d·ªãch v·ª•`,
                    });
                    const taoluc = new Date();
                    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
                    const telegramChatId = process.env.TELEGRAM_CHAT_ID;
                    if (telegramBotToken && telegramChatId) {
                      const telegramMessage =
                        `üìå *TH√îNG B√ÅO HO√ÄN TI·ªÄN!*\n\n` +
                        `üë§ *Kh√°ch h√†ng:* ${order.username}\n` +
                        `üí∞ *S·ªë ti·ªÅn ho√†n:* ${soTienHoan}\n` +
                        `üîπ *T∆∞·ªõng ·ª©ng s·ªë l∆∞·ª£ng:* ${statusObj.remains} Rate : ${order.rate}\n` +
                        `‚è∞ *Th·ªùi gian:* ${taoluc.toLocaleString()}\n`;
                      try {
                        await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                          chat_id: telegramChatId,
                          text: telegramMessage,
                          parse_mode: "Markdown",
                        });
                        console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
                      } catch (telegramError) {
                        console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
                      }
                    }
                    await historyData.save();
                    console.log(`ƒê√£ ho√†n ti·ªÅn cho user ${user.username} s·ªë ti·ªÅn ${soTienHoan} do ƒë∆°n ${order.Madon} b·ªã h·ªßy ho·∫∑c ch·∫°y thi·∫øu.`);
                  }
                }
                if (mappedStatus === 'Canceled') {
                  if (user) {
                    const soTienHoan = ((order.quantity || 0) * order.rate) - 1000; // Gi·∫£ s·ª≠ 1000 l√† ph√≠ d·ªãch v·ª•
                    if ((soTienHoan) < 0) return;
                    user.balance = (user.balance || 0) + soTienHoan;
                    await user.save();
                    const historyData = new HistoryUser({
                      username: order.username,
                      madon: "null",
                      hanhdong: "Ho√†n ti·ªÅn",
                      link: "",
                      tienhientai: tiencu,
                      tongtien: soTienHoan,
                      tienconlai: user.balance,
                      createdAt: new Date(),
                      mota: `H·ªá th·ªëng ho√†n cho b·∫°n ${soTienHoan} d·ªãch v·ª• t∆∞∆°ng ƒë∆∞∆°ng v·ªõi ${order.quantity} cho uid ${order.link} v√† 1000 ph√≠ d·ªãch v·ª•`,
                    });
                    const taoluc = new Date();
                    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
                    const telegramChatId = process.env.TELEGRAM_CHAT_ID;
                    if (telegramBotToken && telegramChatId) {
                      const telegramMessage =
                        `üìå *TH√îNG B√ÅO HO√ÄN TI·ªÄN!*\n\n` +
                        `üë§ *Kh√°ch h√†ng:* ${order.username}\n` +
                        `üí∞ *S·ªë ti·ªÅn ho√†n:* ${soTienHoan}\n` +
                        `üîπ *T∆∞·ªõng ·ª©ng s·ªë l∆∞·ª£ng:* ${order.quantity} Rate : ${order.rate}\n` +
                        `‚è∞ *Th·ªùi gian:* ${taoluc.toLocaleString()}\n`;
                      try {
                        await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                          chat_id: telegramChatId,
                          text: telegramMessage,
                          parse_mode: "Markdown",
                        });
                        console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
                      } catch (telegramError) {
                        console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
                      }
                    }
                    await historyData.save();
                    console.log(`ƒê√£ ho√†n ti·ªÅn cho user ${user._id} s·ªë ti·ªÅn ${soTienHoan} do ƒë∆°n ${order.Madon} b·ªã h·ªßy ho·∫∑c ch·∫°y thi·∫øu.`);
                  }
                }

                await order.save();
                console.log(`ƒê√£ c·∫≠p nh·∫≠t ƒë∆°n ${order.Madon}: status = ${order.status}, dachay = ${order.dachay}`);
              } else {
                console.warn(`Kh√¥ng t√¨m th·∫•y ƒë∆°n n√†o t∆∞∆°ng ·ª©ng v·ªõi orderId ${orderId}`);
              }
            }
          }
        } catch (apiError) {
          console.error(`L·ªói API tr·∫°ng th√°i cho nh√≥m ƒë∆°n:`, apiError.message);
        }
      }
    }
  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng:", error.message);
  }
}

// ƒê·∫∑t l·ªãch ch·∫°y cron job, v√≠ d·ª•: ch·∫°y m·ªói 1 ph√∫t
cron.schedule('*/1 * * * *', () => {
  console.log("Cron job: B·∫Øt ƒë·∫ßu ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng");
  checkOrderStatus();
});

