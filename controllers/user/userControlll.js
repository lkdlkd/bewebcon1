const jwt = require("jsonwebtoken");
const User = require("../../models/User");
const HistoryUser = require("../../models/History");
const axios = require("axios");
const crypto = require("crypto");

exports.login = async (req, res) => {
  try {
    let { username, password } = req.body;

    username = username.toLowerCase();

    const user = await User.findOne({ username: username });
    if (!user || !(await user.comparePassword(password))) {
      return res.status(401).json({ error: "Sai t√™n ng∆∞·ªùi d√πng ho·∫∑c m·∫≠t kh·∫©u" });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i t√†i kho·∫£n
    if (user.status !== "active") {
      return res.status(403).json({ error: "T√†i kho·∫£n ƒë√£ b·ªã kh√≥a" });
    }

    // ‚úÖ T·∫°o token m·ªõi
    const token = jwt.sign(
      { username: user.username, userId: user._id, role: user.role },
      process.env.secretKey, // C√≥ th·ªÉ thay b·∫±ng bi·∫øn env nh∆∞ process.env.JWT_SECRET
      { expiresIn: "7d" } // C√≥ th·ªÉ th√™m th·ªùi gian s·ªëng token
    );

    // ‚úÖ Tr·∫£ v·ªÅ token m·ªõi
    return res.status(200).json({ token, role: user.role, username: user.username });
  } catch (error) {
    console.error("Login error:", error);
    return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra khi ƒëƒÉng nh·∫≠p" });
  }
};

exports.register = async (req, res) => {
  try {
    let { username, password } = req.body;

    // Chuy·ªÉn username th√†nh ch·ªØ th∆∞·ªùng
    username = username.toLowerCase();

    // Ki·ªÉm tra username v√† password kh√¥ng ƒë∆∞·ª£c ng·∫Øn h∆°n 6 k√Ω t·ª±
    if (username.length < 6) {
      return res.status(400).json({ error: "T√™n ng∆∞·ªùi d√πng ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });
    }
    if (password.length < 6) {
      return res.status(400).json({ error: "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });
    }

    // Ki·ªÉm tra username kh√¥ng ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát (ch·ªâ cho ph√©p ch·ªØ, s·ªë v√† g·∫°ch d∆∞·ªõi)
    const usernameRegex = /^[a-zA-Z0-9_]+$/;
    if (!usernameRegex.test(username)) {
      return res.status(400).json({ error: "T√™n ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát" });
    }

    // Ki·ªÉm tra username ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt k√Ω t·ª± ch·ªØ
    const containsLetterRegex = /[a-zA-Z]/;
    if (!containsLetterRegex.test(username)) {
      return res.status(400).json({ error: "T√™n ng∆∞·ªùi d√πng ph·∫£i ch·ª©a √≠t nh·∫•t m·ªôt k√Ω t·ª± ch·ªØ" });
    }

    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
    const existingUser = await User.findOne({ username: username.toLowerCase() });
    if (existingUser) {
      return res.status(400).json({ error: "T√™n ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra xem ƒë√£ c√≥ admin ch∆∞a
    const isAdminExists = await User.findOne({ role: "admin" });

    // **T·∫°o API key**
    const apiKey = crypto.randomBytes(32).toString("hex");

    // T·∫°o ng∆∞·ªùi d√πng m·ªõi
    const user = new User({
      username,
      password,
      role: isAdminExists ? "user" : "admin",
      apiKey, // **L∆∞u API key**
    });

    await user.save();


    // **Th√¥ng b√°o qua Telegram**
    const taoluc = new Date();
    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
    const telegramChatId = process.env.TELEGRAM_CHAT_ID;
    if (telegramBotToken && telegramChatId) {
      const telegramMessage =
        `üìå *C√≥ kh√°ch m·ªõi ƒë∆∞·ª£c t·∫°o!*\n\n` +
        `üë§ *Kh√°ch h√†ng:* ${username}\n` +
        `üîπ *T·∫°o l√∫c:* ${taoluc.toLocaleString()}\n`;

      try {
        await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
          chat_id: telegramChatId,
          text: telegramMessage,
          parse_mode: "Markdown",
        });
        console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
      } catch (telegramError) {
        console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
      }
    }

    return res.status(201).json({
      message: "ƒêƒÉng k√Ω th√†nh c√¥ng",
    });
  } catch (error) {
    console.error("ƒêƒÉng k√Ω l·ªói:", error);
    return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i." });
  }
};

exports.getMe = async (req, res) => {
  try {
    const currentUser = req.user; // L·∫•y t·ª´ middleware
    const username = currentUser.username; // L·∫•y username t·ª´ params
    // N·∫øu l√† admin ho·∫∑c ch√≠nh ch·ªß m·ªõi ƒë∆∞·ª£c xem th√¥ng tin
    if (currentUser.role !== "admin" && currentUser.username !== username) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn xem th√¥ng tin ng∆∞·ªùi d√πng n√†y" });
    }

    // T√¨m ng∆∞·ªùi d√πng theo username
    const user = await User.findOne({ username }).select("-password");
    if (!user) {
      return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // Tr·∫£ v·ªÅ th√¥ng tin user nh∆∞ng thay token b·∫±ng apiKey
    return res.status(200).json({
      balance: user.balance,
      capbac: user.capbac,
      createdAt: user.createdAt,
      role: user.role,
      status: user.status,
      token: user.apiKey, // Hi·ªÉn th·ªã API Key thay v√¨ token
      tongnap: user.tongnap,
      tongnapthang: user.tongnapthang,
      updatedAt: user.updatedAt,
      userId: user._id,
      username: user.username,
    });
  } catch (error) {
    console.error("Get user error:", error);
    return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};

// C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (ch·ªâ admin ho·∫∑c ch√≠nh ch·ªß m·ªõi c√≥ th·ªÉ s·ª≠a)
exports.updateUser = async (req, res) => {
  try {
    const currentUser = req.user;
    const { id } = req.params;

    // Ch·ªâ admin ho·∫∑c ch√≠nh ch·ªß m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t
    if (currentUser.role !== "admin") {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a th√¥ng tin ng∆∞·ªùi d√πng n√†y" });
    }

    const updatedData = req.body;
    const updatedUser = await User.findByIdAndUpdate(id, updatedData, { new: true })
      .select("-password");
    if (!updatedUser) {
      return res.status(404).json({ message: "User not found" });
    }
    return res.json(updatedUser);
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};
// C·ªông ti·ªÅn v√†o s·ªë d∆∞ (ch·ªâ admin m·ªõi c√≥ quy·ªÅn)
exports.addBalance = async (req, res) => {
  try {
    const currentUser = req.user;
    if (currentUser.role !== "admin") {
      return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn c·ªông ti·ªÅn v√†o s·ªë d∆∞" });
    }
    const { id } = req.params;
    const { amount } = req.body;

    if (!amount || isNaN(amount) || amount <= 0) {
      return res.status(400).json({ message: "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá" });
    }

    // L·∫•y ng√†y hi·ªán t·∫°i
    const currentDate = new Date();
    const currentMonth = currentDate.getMonth() + 1;
    const currentYear = currentDate.getFullYear();

    // T√¨m ng∆∞·ªùi d√πng v√† c·∫≠p nh·∫≠t s·ªë d∆∞
    let user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    const update = {
      $inc: {
        balance: amount,
        tongnap: amount,
        tongnapthang: amount,
      },
      $set: { lastDepositMonth: { month: currentMonth, year: currentYear } },
    };

    const updatedUser = await User.findByIdAndUpdate(id, update, { new: true })
      .select("-password");

    // L∆∞u l·ªãch s·ª≠ giao d·ªãch
    const currentBalance = updatedUser.balance;
    const historyDataa = new HistoryUser({
      username: updatedUser.username,
      madon: "null",
      hanhdong: "C·ªông ti·ªÅn",
      link: "",
      tienhientai: user.balance,
      tongtien: amount,
      tienconlai: currentBalance,
      createdAt: new Date(),
      mota: `Admin c·ªông th√†nh c√¥ng s·ªë ti·ªÅn ${amount}`,
    });
    await historyDataa.save();
    const taoluc = new Date();

    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
    const telegramChatId = process.env.TELEGRAM_CHAT_ID;
    if (telegramBotToken && telegramChatId) {
      const telegramMessage =
        `üìå *C·ªông ti·ªÅn!*\n\n` +
        `üë§ *Kh√°ch h√†ng:* ${updatedUser.username}\n` +
        `üë§ *C·ªông ti·ªÅn:*  Admin ƒë√£ c·ªông th√†nh c√¥ng s·ªë ti·ªÅn ${amount}.\n` +
        `üîπ *T·∫°o l√∫c:* ${taoluc.toLocaleString()}\n`;
      try {
        await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
          chat_id: telegramChatId,
          text: telegramMessage,
        });
        console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
      } catch (telegramError) {
        console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
      }
    } else {
      console.log("Thi·∫øu th√¥ng tin c·∫•u h√¨nh Telegram.");
    }
    res.status(200).json({ message: "C·ªông ti·ªÅn th√†nh c√¥ng" });
  } catch (error) {
    console.error("Add balance error:", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
};

// Tr·ª´ ti·ªÅn kh·ªèi s·ªë d∆∞ (ch·ªâ admin m·ªõi c√≥ quy·ªÅn)
exports.deductBalance = async (req, res) => {
  try {
    const currentUser = req.user;
    if (currentUser.role !== "admin") {
      return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn tr·ª´ ti·ªÅn t·ª´ s·ªë d∆∞" });
    }

    const { id } = req.params;
    const { amount } = req.body;

    if (!amount || isNaN(amount) || amount <= 0) {
      return res.status(400).json({ message: "S·ªë ti·ªÅn c·∫ßn tr·ª´ kh√¥ng h·ª£p l·ªá" });
    }

    // T√¨m ng∆∞·ªùi d√πng trong c∆° s·ªü d·ªØ li·ªáu
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // Ki·ªÉm tra s·ªë d∆∞ c√≥ ƒë·ªß ƒë·ªÉ tr·ª´ kh√¥ng
    if (user.balance < amount) {
      return res.status(400).json({ message: "S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ tr·ª´" });
    }
    const tiencu = user.balance;
    // Tr·ª´ ti·ªÅn v√† c·∫≠p nh·∫≠t s·ªë d∆∞
    const updatedBalance = user.balance - amount;
    const updatedUser = await User.findByIdAndUpdate(
      id,
      { balance: updatedBalance },
      { new: true }
    ).select("-password");

    // L∆∞u l·ªãch s·ª≠ giao d·ªãch
    const historyData = new HistoryUser({
      username: updatedUser.username,
      madon: "null",
      hanhdong: "Tr·ª´ ti·ªÅn",
      link: "",
      tienhientai: tiencu,
      tongtien: amount,
      tienconlai: updatedBalance,
      createdAt: new Date(),
      mota: `Admin tr·ª´ th√†nh c√¥ng s·ªë ti·ªÅn ${amount}`,
    });
    await historyData.save();

    // G·ª≠i th√¥ng b√°o qua Telegram (n·∫øu c·∫•u h√¨nh c√≥ ƒë·ªß)
    const taoluc = new Date();
    const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
    const telegramChatId = process.env.TELEGRAM_CHAT_ID;
    if (telegramBotToken && telegramChatId) {
      const telegramMessage =
        `üìå *Tr·ª´ ti·ªÅn!*\n\n` +
        `üë§ *Kh√°ch h√†ng:* ${updatedUser.username}\n` +
        `üí∏ *S·ªë ti·ªÅn tr·ª´:* Admin ƒë√£ tr·ª´ th√†nh c√¥ng s·ªë ti·ªÅn ${amount}.\n` +
        `üîπ *T·∫°o l√∫c:* ${taoluc.toLocaleString()}\n`;
      try {
        await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
          chat_id: telegramChatId,
          text: telegramMessage,
          parse_mode: "Markdown",
        });
        console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
      } catch (telegramError) {
        console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
      }
    } else {
      console.log("Thi·∫øu th√¥ng tin c·∫•u h√¨nh Telegram.");
    }

    return res.status(200).json({ message: "Tr·ª´ ti·ªÅn th√†nh c√¥ng" });
  } catch (error) {
    console.error("Deduct balance error:", error);
    return res.status(500).json({ message: "L·ªói server" });
  }
};

// X√≥a ng∆∞·ªùi d√πng (ch·ªâ admin m·ªõi c√≥ quy·ªÅn)
exports.deleteUser = async (req, res) => {
  try {
    const currentUser = req.user;
    if (currentUser.role !== "admin") {
      return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng" });
    }
    const { id } = req.params;
    const deletedUser = await User.findByIdAndDelete(id);
    if (!deletedUser) {
      return res.status(404).json({ message: "User not found" });
    }
    return res.json({ message: "X√≥a user th√†nh c√¥ng" });
  } catch (error) {
    return res.status(500).json({ message: error.message });
  }
};

// ƒê·ªïi m·∫≠t kh·∫©u (ch·ªâ admin ho·∫∑c ch√≠nh ch·ªß t√†i kho·∫£n m·ªõi c√≥ th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u)
exports.changePassword = async (req, res) => {
  try {
    const currentUser = req.user;
    const { id } = req.params;
    const { oldPassword, newPassword } = req.body;

    if (!newPassword) {
      return res.status(400).json({ error: "M·∫≠t kh·∫©u m·ªõi kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" });
    }

    // Ki·ªÉm tra ƒë·ªô d√†i m·∫≠t kh·∫©u m·ªõi
    if (newPassword.length < 6) {
      return res.status(400).json({ error: "M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±" });
    }

    // Ki·ªÉm tra quy·ªÅn h·∫°n
    if (currentUser.role !== "admin" && currentUser._id.toString() !== id) {
      return res.status(403).json({ error: "B·∫°n kh√¥ng c√≥ quy·ªÅn ƒë·ªïi m·∫≠t kh·∫©u cho ng∆∞·ªùi d√πng n√†y" });
    }

    // T√¨m user
    const user = await User.findById(id);
    if (!user) {
      return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    // N·∫øu kh√¥ng ph·∫£i admin, ki·ªÉm tra m·∫≠t kh·∫©u c≈©
    if (currentUser.role !== "admin") {
      if (!oldPassword) {
        return res.status(400).json({ error: "Vui l√≤ng cung c·∫•p m·∫≠t kh·∫©u hi·ªán t·∫°i" });
      }
      const isMatch = await user.comparePassword(oldPassword);
      if (!isMatch) {
        return res.status(400).json({ error: "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ch√≠nh x√°c" });
      }
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = newPassword;

    // T·∫°o token m·ªõi
    const newToken = jwt.sign(
      { username: user.username, userId: user._id, role: user.role },
      process.env.secretKey
    );

    // **T·∫°o API key m·ªõi**
    const newApiKey = crypto.randomBytes(32).toString("hex");

    // C·∫≠p nh·∫≠t th√¥ng tin m·ªõi v√†o database
    user.apiKey = newApiKey;
    await user.save();

    return res.status(200).json({
      message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng"

    });
  } catch (error) {
    console.error("Change password error:", error);
    return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau." });
  }
};

// // L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (ch·ªâ admin m·ªõi c√≥ quy·ªÅn)
// exports.getAllUsers = async (req, res) => {
//   try {
//     const currentUser = req.user;
//     if (currentUser.role !== "admin") {
//       return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn xem danh s√°ch ng∆∞·ªùi d√πng" });
//     }
//     const users = await User.find()
//       .select("-password")
//       .sort({ balance: -1 }); // S·∫Øp x·∫øp theo balance t·ª´ cao ƒë·∫øn th·∫•p

//     // L·∫•y t·∫•t c·∫£ user, lo·∫°i b·ªè tr∆∞·ªùng password
//     //const users = await User.find().select("-password");
//     return res.status(200).json({ users });
//   } catch (error) {
//     console.error("Get all users error:", error);
//     return res.status(500).json({ error: "C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau." });
//   }
// };
exports.getUsers = async (req, res) => {
  try {
    const currentUser = req.user;
    if (currentUser.role !== "admin") {
      return res.status(403).json({ error: "Ch·ªâ admin m·ªõi c√≥ quy·ªÅn xem danh s√°ch ng∆∞·ªùi d√πng" });
    }

    // L·∫•y c√°c tham s·ªë t·ª´ query
    let { username } = req.query;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    // T·∫°o b·ªô l·ªçc t√¨m ki·∫øm
    const filter = username ? { username: { $regex: username, $options: "i" } } : {};

    const skip = (page - 1) * limit;
    const users = await User.find(filter)
      .select("-password")
      .sort({ balance: -1 })
      .skip(skip)
      .limit(limit);

    // T·ªïng s·ªë ng∆∞·ªùi d√πng
    const total = await User.countDocuments(filter);

    return res.json({
      total,
      page,
      totalPages: Math.ceil(total / limit),
      users,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:", error);
    return res.status(500).json({ message: "L·ªói server", error: error.message });
  }
};

// L·∫•y danh s√°ch l·ªãch s·ª≠ theo username ho·∫∑c orderId, h·ªó tr·ª£ ph√¢n trang
exports.getHistory = async (req, res) => {
  try {
    const currentUser = req.user;
    let { page = 1, limit = 10, orderId, search } = req.query;

    page = parseInt(page);
    limit = limit === "all" ? null : parseInt(limit);
    const skip = (page - 1) * (limit || 0);
    let filter = {};

    if (currentUser.role === "admin") {
      // Admin: xem t·∫•t c·∫£, t√¨m ki·∫øm theo username ho·∫∑c orderId
      if (orderId) {
        filter.madon = orderId;
      }
      if (search) {
        filter.username = { $regex: search, $options: "i" };
      }
    } else {
      // User th∆∞·ªùng: ch·ªâ xem l·ªãch s·ª≠ c·ªßa ch√≠nh m√¨nh
      filter.username = currentUser.username;
      if (orderId) {
        filter.madon = orderId;
        filter.search = link;
      }
    }

    if (!limit) {
      const history = await HistoryUser.find(filter).sort({ createdAt: -1 });
      return res.status(200).json({
        history,
        totalItems: history.length,
        page: 1,
        totalPages: 1,
      });
    }

    const totalItems = await HistoryUser.countDocuments(filter);
    const totalPages = Math.ceil(totalItems / limit);

    const history = await HistoryUser.find(filter)
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(limit);

    return res.status(200).json({
      history,
      totalItems,
      page,
      totalPages,
    });
  } catch (error) {
    console.error("L·ªói khi l·∫•y l·ªãch s·ª≠:", error);
    res.status(500).json({ message: "L·ªói server", error });
  }
};




