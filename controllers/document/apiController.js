const axios = require('axios');
const jwt = require('jsonwebtoken');
const Service = require('../../models/server');
const Order = require('../../models/Order');
const HistoryUser = require('../../models/History');
const User = require('../../models/User');
const SmmSv = require("../../models/SmmSv");
const SmmApiService = require('../Smm/smmServices'); // Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt l·ªõp ƒë·ªÉ x·ª≠ l√Ω API SMM

/* H√†m l·∫•y danh s√°ch d·ªãch v·ª• */
exports.getServices = async (req, res) => {
    try {
        const { key } = req.body;
        // Ki·ªÉm tra xem token c√≥ ƒë∆∞·ª£c g·ª≠i kh√¥ng
        // Ki·ªÉm tra xem token c√≥ ƒë∆∞·ª£c g·ª≠i kh√¥ng
        if (!key) {
            return res.status(400).json({ success: false, error: "Token kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" });
        }
        // L·∫•y user t·ª´ DB d·ª±a tr√™n userId t·ª´ decoded token
        const user = await User.findOne({ apiKey: key });
        if (!user) {
            res.status(404).json({ error: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
            return null;
        }

        // So s√°nh token trong header v·ªõi token ƒë√£ l∆∞u c·ªßa user
        if (user.apiKey !== key) {
            res.status(401).json({ error: 'api Key kh√¥ng h·ª£p l·ªá1' });
            return null;
        }
        // Ki·ªÉm tra tr·∫°ng th√°i ng∆∞·ªùi d√πng trong CSDL (v√≠ d·ª•: 'active')
        if (!user) {
            return res.status(404).json({ success: false, error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
        }
        if (user.status && user.status !== 'active') {
            return res.status(403).json({ success: false, error: "Ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông" });
        }
        // L·∫•y danh s√°ch d·ªãch v·ª• t·ª´ CSDL
        const services = await Service.find()
            .populate("category", "name"); // L·∫•y th√¥ng tin t√™n c·ªßa Category
        // ƒê·ªãnh d·∫°ng c√°c tr∆∞·ªùng c·∫ßn hi·ªÉn th·ªã
        const formattedServices = services.map(service => ({
            service: service.Magoi,
            name: `${service.maychu} ${service.name}`, // ƒê·∫£m b·∫£o c√≥ kho·∫£ng tr·∫Øng
            type: "Default", // Ho·∫∑c l·∫•y t·ª´ service.type n·∫øu c√≥
            category: service.category.name || "Kh√¥ng x√°c ƒë·ªãnh", // Ki·ªÉm tra n·∫øu category t·ªìn t·∫°i
            rate: service.rate / 25,
            min: service.min,
            max: service.max,
            cancel: false,
            refill: false,
        }));

        return res.status(200).json(formattedServices);
    } catch (error) {
        console.error("L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•:", error);
        return res.status(500).json({
            success: false,
            message: 'L·ªói khi l·∫•y danh s√°ch d·ªãch v·ª•',
            error: error.message
        });
    }
};
async function fetchSmmConfig(domain) {
    const smmSvConfig = await SmmSv.findOne({ name: domain });
    if (!smmSvConfig || !smmSvConfig.url_api || !smmSvConfig.api_token) {
        throw new Error('L·ªói khi mua d·ªãch v·ª•, vui l√≤ng ib admin');
    }
    return smmSvConfig;
}

async function fetchServiceData(magoi) {
    const serviceFromDb = await Service.findOne({ Magoi: magoi }).populate("category", "name");;
    if (!serviceFromDb) throw new Error('D·ªãch v·ª• kh√¥ng t·ªìn t·∫°i');
    return serviceFromDb;
}
exports.AddOrder = async (req, res) => {
    // L·∫•y token t·ª´ req.body
    const { key, service, link, quantity, comments } = req.body;
    const magoi = service;

    if (!key) {
        return res.status(400).json({ error: "Token kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" });
    }
    const user = await User.findOne({ apiKey: key });
    if (!user) {
        res.status(404).json({ error: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
        return null;
    }
    if (user.apiKey !== key) {
        res.status(401).json({ error: 'api Key kh√¥ng h·ª£p l·ªá1' });
        return null;
    }
    if (!user) {
        return res.status(404).json({ success: false, error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
    }
    if (user.status && user.status !== 'active') {
        return res.status(403).json({ success: false, error: "Ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông" });
    }


    const username = user.username
    const qty = Number(quantity);
    const formattedComments = comments ? comments.replace(/\r?\n/g, "\r\n") : "";

    try {
        // --- B∆∞·ªõc 1: L·∫•y th√¥ng tin d·ªãch v·ª• t·ª´ CSDL ---
        const serviceFromDb = await fetchServiceData(magoi);
        const smmSvConfig = await fetchSmmConfig(serviceFromDb.DomainSmm);

        const smm = new SmmApiService(smmSvConfig.url_api, smmSvConfig.api_token);
        const allServices = await smm.services();
        console.log('Service from API:', serviceFromDb.serviceId);

        console.log('All Services:', allServices);
        const serviceFromApi = allServices.find(
            s => s.service === Number(serviceFromDb.serviceId) || s.service === serviceFromDb.serviceId
        );
        console.log('Service from API:', serviceFromApi);
        if (!serviceFromApi) throw new Error('l·ªói khi mua d·ªãch v·ª•, vui l√≤ng ib admin11');


        // T√≠nh t·ªïng chi ph√≠ v√† l√†m tr√≤n 2 s·ªë th·∫≠p ph√¢n
        const totalCost = serviceFromDb.rate * qty; // K·∫øt qu·∫£: 123.4
        const apiRate = serviceFromApi.rate * smmSvConfig.tigia;
        if (apiRate > serviceFromDb.rate) {
            return res.status(400).json({ error: 'L·ªói khi mua d·ªãch v·ª•, vui l√≤ng ib admin' });
        }

        if (!serviceFromDb.isActive) {
            return res.status(400).json({ error: "D·ªãch v·ª• b·∫£o tr√¨, vui l√≤ng mua sv kh√°c" });
        }
        if (qty < serviceFromDb.min || qty > serviceFromDb.max) {
            throw new Error('S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá');
        }
        if (user.balance < totalCost) {
            throw new Error('S·ªë d∆∞ kh√¥ng ƒë·ªß ƒë·ªÉ th·ª±c hi·ªán giao d·ªãch');
        }

        // --- B∆∞·ªõc 4: G·ª≠i y√™u c·∫ßu mua d·ªãch v·ª• qua API b√™n th·ª© 3 ---
        const purchasePayload = {
            link,
            quantity: qty,
            service: serviceFromDb.serviceId,
            comments: formattedComments,
        };

        const purchaseResponse = await smm.order(purchasePayload);
        if (!purchaseResponse || !purchaseResponse.order) {
            throw new Error('L·ªói khi mua d·ªãch v·ª•, vui l√≤ng th·ª≠ l·∫°i sau');
        }

        // --- B∆∞·ªõc 5: Tr·ª´ s·ªë ti·ªÅn v√†o t√†i kho·∫£n ng∆∞·ªùi d√πng ---
        const newBalance = user.balance - totalCost;
        user.balance = newBalance;
        await user.save();

        // --- B∆∞·ªõc 6: T·∫°o m√£ ƒë∆°n (Madon) ---
        const lastOrder = await Order.findOne({}).sort({ Madon: -1 });
        const newMadon = lastOrder && lastOrder.Madon ? Number(lastOrder.Madon) + 1 : 10000;

        // --- B∆∞·ªõc 7: T·∫°o ƒë·ªëi t∆∞·ª£ng ƒë∆°n h√†ng v√† l∆∞u v√†o CSDL ---
        const createdAt = new Date();
        const orderData = new Order({
            Madon: newMadon,
            username,
            SvID: serviceFromDb.serviceId,
            orderId: purchaseResponse.order,
            namesv: `${serviceFromDb.maychu} ${serviceFromDb.name}`,
            category: serviceFromDb.category.name || "Kh√¥ng x√°c ƒë·ªãnh", // Ki·ªÉm tra n·∫øu category t·ªìn t·∫°i
            link,
            start: 0,
            quantity: qty,
            rate: serviceFromDb.rate,
            totalCost,
            createdAt,
            status: 'Pending',
            note: "",  // G√°n m·∫∑c ƒë·ªãnh l√† chu·ªói r·ªóng khi kh√¥ng c√≥ note
            comments: formattedComments,
        });

        const HistoryData = new HistoryUser({
            username,
            madon: newMadon,
            hanhdong: 'T·∫°o ƒë∆°n h√†ng',
            link,
            tienhientai: user.balance + totalCost,
            tongtien: totalCost,
            tienconlai: newBalance,
            createdAt,
            mota: `TƒÉng ${serviceFromDb.maychu} ${serviceFromDb.name} th√†nh c√¥ng cho uid ${link}`,
        });

        console.log('Order:', orderData);
        console.log('History:', HistoryData);

        await orderData.save();
        await HistoryData.save();

        console.log('Order saved successfully!');

        // --- B∆∞·ªõc 8: G·ª≠i th√¥ng b√°o v·ªÅ Telegram ---
        const telegramMessage = `üìå *ƒê∆°n h√†ng m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o!*\n\n` +
            `üë§ *Kh√°ch h√†ng:* ${username}\n` +
            `üîπ *D·ªãch v·ª•:* ${serviceFromDb.name}\n` +
            `üîó *Link:* ${link}\n` +
            `üìå *S·ªë l∆∞·ª£ng:* ${qty}\n` +
            `üí∞ *Ti·ªÅn c≈©:* ${(user.balance + totalCost).toLocaleString()} VNƒê\n` +
            `üí∞ *T·ªïng ti·ªÅn:* ${totalCost.toLocaleString()} VNƒê\n` +
            `üí∞ *TI·ªÅn c√≤n l·∫°i:* ${newBalance.toLocaleString()} VNƒê\n` +
            `üÜî *M√£ ƒë∆°n:* ${newMadon}\n` +
            `üìÜ *Ng√†y t·∫°o:* ${createdAt.toLocaleString()}\n` +
            `üìù *Ghi ch√∫:* ${'Kh√¥ng c√≥'}`;

        await sendTelegramNotification({
            telegramBotToken: process.env.TELEGRAM_BOT_TOKEN,
            telegramChatId: process.env.TELEGRAM_CHAT_ID,
            message: telegramMessage,
        });
        res.status(200).json({ order: newMadon });
    } catch (error) {
        console.error(error);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ th√™m ƒë∆°n h√†ng', error: error.message });
    }
};

async function sendTelegramNotification(data) {
    const { telegramBotToken, telegramChatId, message } = data;
    if (telegramBotToken && telegramChatId) {
        try {
            await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                chat_id: telegramChatId,
                text: message,
            });
            console.log('Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.');
        } catch (error) {
            console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', error.message);
        }
    } else {
        console.log('Thi·∫øu th√¥ng tin c·∫•u h√¨nh Telegram.');
    }
}

/* H√†m l·∫•y danh s√°ch d·ªãch v·ª• */
exports.getOrderStatus = async (req, res) => {
    try {
        const { key, order, orders } = req.body;

        // Ki·ªÉm tra xem API key c√≥ ƒë∆∞·ª£c g·ª≠i kh√¥ng
        if (!key) {
            return res.status(400).json({ error: "Token kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" });
        }

        // T√¨m user d·ª±a tr√™n apiKey
        const user = await User.findOne({ apiKey: key });
        if (!user) {
            return res.status(404).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
        }

        // Ki·ªÉm tra tr·∫°ng th√°i ng∆∞·ªùi d√πng
        if (user.status && user.status !== 'active') {
            return res.status(403).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông" });
        }

        // X·ª≠ l√Ω tr∆∞·ªùng h·ª£p c√≥ `orders` ho·∫∑c `order`
        let orderNumbers = [];

        if (orders) {
            // `orders` l√† danh s√°ch ƒë∆°n h√†ng, c·∫ßn format th√†nh object
            orderNumbers = Array.isArray(orders)
                ? orders.map(num => Number(num))
                : orders.split(',').map(num => Number(num.trim()));
        } else if (order) {
            // `order` l√† danh s√°ch ho·∫∑c m·ªôt ƒë∆°n duy nh·∫•t
            orderNumbers = [Number(order)];

        } else {
            return res.status(400).json({ error: "Danh s√°ch ƒë∆°n h√†ng kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" });
        }

        // L·∫•y c√°c ƒë∆°n h√†ng t·ª´ DB
        const orderDocs = await Order.find({
            Madon: { $in: orderNumbers },
            // username: user.username // Ki·ªÉm tra ƒë∆°n h√†ng c√≥ thu·ªôc v·ªÅ user kh√¥ng
        });
        if (orders) {
            // N·∫øu c√≥ `orders`, tr·∫£ v·ªÅ object v·ªõi `Madon` l√†m key
            const formattedOrders = {};
            orderDocs.forEach(order => {
                if (order.username === user.username) {
                    formattedOrders[order.Madon] = {
                        charge: order.totalCost,
                        start_count: order.start,
                        status: order.status,
                        remains: order.quantity - order.dachay,
                        note: order.note || "",
                        currency: "VND"
                    };
                }
                else {
                    formattedOrders[order.Madon] = {
                        error: "Incorrect order ID"
                    };
                }
            });
            return res.status(200).json(formattedOrders);
        }
        // Gi·∫£ s·ª≠ orderDocs l√† m·∫£ng c√°c ƒë∆°n h√†ng t·ª´ DB
        if (orderDocs.length > 0) {
            const firstOrder = orderDocs[0];
            let formattedOrder;
            if (firstOrder.username === user.username) {
                formattedOrder = {
                    charge: firstOrder.totalCost,
                    start_count: firstOrder.start,
                    status: firstOrder.status,
                    remains: firstOrder.quantity - firstOrder.dachay,
                    note: firstOrder.note || "",
                    currency: "VND"
                };
            } else {
                formattedOrder = { order: firstOrder.Madon, error: "Incorrect order ID" };
            }
            return res.status(200).json(formattedOrder);
        } else {
            return res.status(200).json({ error: "Order not found" });
        }


        return res.status(200).json(formattedList);


        // N·∫øu c√≥ `order`, tr·∫£ v·ªÅ danh s√°ch

    } catch (error) {
        console.error("L·ªói khi l·∫•y tr·∫°ng th√°i ƒë∆°n:", error);
        return res.status(500).json({
            error: "L·ªói khi l·∫•y tr·∫°ng th√°i ƒë∆°n",
        });
    }
};

exports.getme = async (req, res) => {
    try {
        const { key } = req.body;

        // Ki·ªÉm tra xem token c√≥ ƒë∆∞·ª£c g·ª≠i kh√¥ng
        if (!key) {
            return res.status(400).json({ error: "Token kh√¥ng ƒë∆∞·ª£c b·ªè tr·ªëng" });
        }
        // L·∫•y user t·ª´ DB d·ª±a tr√™n userId t·ª´ decoded token
        const user = await User.findOne({ apiKey: key });
        if (!user) {
            res.status(404).json({ error: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
            return null;
        }

        // So s√°nh token trong header v·ªõi token ƒë√£ l∆∞u c·ªßa user
        if (user.apiKey !== key) {
            res.status(401).json({ error: 'api Key kh√¥ng h·ª£p l·ªá1' });
            return null;
        }
        // Ki·ªÉm tra tr·∫°ng th√°i ng∆∞·ªùi d√πng trong CSDL (v√≠ d·ª•: 'active')
        if (!user) {
            return res.status(404).json({ error: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" });
        }
        if (user.status && user.status !== 'active') {
            return res.status(403).json({ error: "Ng∆∞·ªùi d√πng kh√¥ng ho·∫°t ƒë·ªông" });
        }
        // ƒê·ªãnh d·∫°ng c√°c tr∆∞·ªùng c·∫ßn hi·ªÉn th·ªã (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo y√™u c·∫ßu)
        const userForm = {
            balance: user.balance / 25,
            currency: "USD",
            // C√°c tr∆∞·ªùng kh√°c n·∫øu c·∫ßn
        };
        return res.status(200).json(userForm);
    } catch (error) {
        console.error("L·ªói khi l·∫•y th√¥ng tin:", error);
        return res.status(500).json({
            error: "L·ªói khi l·∫•y th√¥ng tin",
        });
    }
};
/* H√†m ƒëi·ªÅu ph·ªëi d·ª±a tr√™n gi√° tr·ªã c·ªßa action trong body */
exports.routeRequest = async (req, res) => {
    const { action } = req.body;

    if (action === 'services') {
        // G·ªçi h√†m l·∫•y danh s√°ch d·ªãch v·ª•
        return exports.getServices(req, res);
    } else if (action === 'add') {
        // G·ªçi h√†m t·∫°o ƒë∆°n h√†ng
        return exports.AddOrder(req, res);
    } else if (action === 'status') {
        // G·ªçi h√†m t·∫°o get tr·∫°ng th√°i
        return exports.getOrderStatus(req, res);
    } else if (action === 'balance') {
        // G·ªçi h√†m t·∫°o get tr·∫°ng th√°i
        return exports.getme(req, res);
    }
    else {
        return res.status(400).json({ error: "Action kh√¥ng h·ª£p l·ªá" });
    }
};
