const axios = require('axios');
const cron = require('node-cron');
const Banking = require('../../models/Bankking');
const Transaction = require('../../models/TransactionBanking');
const User = require('../../models/User');
const Promotion = require('../../models/Promotion');
const HistoryUser = require('../../models/History');

// H√†m t·∫°o URL API t∆∞∆°ng ·ª©ng v·ªõi lo·∫°i ng√¢n h√†ng
function getBankApiUrl(bank) {
    const { bank_name, bank_password, account_number, token } = bank;

    switch (bank_name.toLowerCase()) {
        case 'acb':
            return `https://api.web2m.com/historyapiacbv3/${bank_password}/${account_number}/${token}`;
        case 'vietcombank':
            return `https://api.web2m.com/historyapivcbv3/${bank_password}/${account_number}/${token}`;
        case 'techcombank':
            return `https://api.web2m.com/historyapitcbv3/${bank_password}/${account_number}/${token}`;
        case 'mbbank':
            return `https://api.web2m.com/historyapimbv3/${bank_password}/${account_number}/${token}`;
        case 'bidv':
            return `https://api.web2m.com/historyapibidvv3/${bank_password}/${account_number}/${token}`;
        default:
            return null;
    }
}

// H√†m tr√≠ch xu·∫•t username t·ª´ m√¥ t·∫£ ki·ªÉu "naptien username"
// function extractUsername(description) {
//     const match = description.match(/naptien\s+([a-zA-Z0-9_.]+)/i);
//     return match ? match[1] : null;
// }
const Configweb = require('../../models/Configweb');

// H√†m tr√≠ch xu·∫•t username t·ª´ m√¥ t·∫£ ki·ªÉu "cuphap username"
async function extractUsername(description) {
    try {
        // L·∫•y gi√° tr·ªã cuphap t·ª´ Configweb
        const config = await Configweb.findOne();
        const cuphap = config?.cuphap || "naptien"; // S·ª≠ d·ª•ng "naptien" l√†m gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
        console.log(`Cuphap: ${cuphap}`); // In ra gi√° tr·ªã cuphap ƒë·ªÉ ki·ªÉm tra
        console.log(`M√¥ t·∫£: ${description}`); // In ra m√¥ t·∫£ ƒë·ªÉ ki·ªÉm tra

        // T·∫°o regex ƒë·ªông d·ª±a tr√™n gi√° tr·ªã cuphap, ch·ªâ l·∫•y t·ª´ sau cuphap kh√¥ng ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát
        const regex = new RegExp(`${cuphap}\\s+([a-zA-Z0-9_]+)`, "i");
        const match = description.match(regex);
        console.log(`Regex: ${regex}`); // In ra regex ƒë·ªÉ ki·ªÉm tra
        console.log(`Match: ${match}`); // In ra k·∫øt qu·∫£ match ƒë·ªÉ ki·ªÉm tra

        return match ? match[1] : null;
    } catch (error) {
        console.error("L·ªói khi l·∫•y cuphap t·ª´ Configweb:", error.message);
        return null;
    }
}
// H√†m t√≠nh ti·ªÅn th∆∞·ªüng khuy·∫øn m√£i (n·∫øu c√≥)
// H√†m t√≠nh ti·ªÅn th∆∞·ªüng khuy·∫øn m√£i (n·∫øu c√≥)
async function calculateBonus(amount) {
    const now = new Date(); // gi·ªù local
    const nowUtc = new Date(now.toISOString()); // ho·∫∑c: new Date(Date.now())

    const promo = await Promotion.findOne({
        startTime: { $lte: nowUtc },
        endTime: { $gte: nowUtc },
    });
    if (!promo) {
        console.log("‚ö†Ô∏è Kh√¥ng c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i");
        return 0; // Kh√¥ng c√≥ khuy·∫øn m√£i, tr·∫£ v·ªÅ 0
    }
    // Ki·ªÉm tra n·∫øu s·ªë ti·ªÅn nh·ªè h∆°n minAmount
    if (amount < promo.minAmount) {
        console.log(`‚ö†Ô∏è S·ªë ti·ªÅn (${amount}) nh·ªè h∆°n s·ªë ti·ªÅn t·ªëi thi·ªÉu (${promo.minAmount}) ƒë·ªÉ ƒë∆∞·ª£c khuy·∫øn m√£i`);
        return 0; // Kh√¥ng √°p d·ª•ng khuy·∫øn m√£i
    }

    console.log(`üéâ Ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i: ${promo.name} - T·ª∑ l·ªá: ${promo.percentBonus}%`);
    const bonus = Math.floor((amount * promo.percentBonus) / 100);
    return { bonus, promo }; // Tr·∫£ v·ªÅ ti·ªÅn th∆∞·ªüng v√† t·ª∑ l·ªá khuy·∫øn m√£i
}

// Cron job m·ªói ph√∫t
cron.schedule('*/30 * * * * *', async () => {
    console.log('‚è≥ ƒêang ch·∫°y cron job...');

    try {
        const banks = await Banking.find({ status: true }); // Ch·ªâ l·∫•y c√°c ng√¢n h√†ng ƒëang ho·∫°t ƒë·ªông

        for (const bank of banks) {
            const apiUrl = getBankApiUrl(bank);
            if (!apiUrl) {
                console.log(`‚ùå Kh√¥ng h·ªó tr·ª£ ng√¢n h√†ng: ${bank.bank_name}`);
                continue;
            }

            try {
                const res = await axios.get(apiUrl);
                let { transactions } = res.data;

                if (!transactions || transactions.length === 0) {
                    console.log(`‚ö†Ô∏è Kh√¥ng c√≥ giao d·ªãch m·ªõi cho ng√¢n h√†ng: ${bank.bank_name}`);
                    continue;
                }

                // Ch·ªâ x·ª≠ l√Ω 20 giao d·ªãch g·∫ßn nh·∫•t
                transactions = transactions.slice(0, 20);

                for (const trans of transactions) {
                    // X·ª≠ l√Ω m·ªçi giao d·ªãch, kh√¥ng ch·ªâ IN
                    const exists = await Transaction.findOne({ transactionID: trans.transactionID });
                    if (exists) {
                        console.log(`‚ö†Ô∏è Giao d·ªãch ƒë√£ t·ªìn t·∫°i: ${trans.transactionID}`);
                        continue; // B·ªè qua n·∫øu giao d·ªãch ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
                    }

                    const username = await extractUsername(trans.description);
                    let user = null;
                    let bonus = 0;
                    let totalAmount = 0;
                    let promo = null;
                    const amount = parseFloat(trans.amount); // Chuy·ªÉn ƒë·ªïi amount t·ª´ chu·ªói sang s·ªë

                    if (trans.type === 'IN' && username) {
                        // T√¨m user theo username
                        user = await User.findOne({ username });

                        // C·∫≠p nh·∫≠t s·ªë d∆∞ ng∆∞·ªùi d√πng v√† t·ªïng s·ªë ti·ªÅn n·∫°p
                        if (user) {
                            const tiencu = user.balance;
                            // T√≠nh ti·ªÅn th∆∞·ªüng khuy·∫øn m√£i (n·∫øu c√≥)
                            const bonusResult = await calculateBonus(amount);
                            bonus = bonusResult.bonus || 0; // L·∫•y ti·ªÅn th∆∞·ªüng t·ª´ k·∫øt qu·∫£, n·∫øu kh√¥ng c√≥ th√¨ m·∫∑c ƒë·ªãnh l√† 0
                            promo = bonusResult.promo; // Assign promo here
                            totalAmount = amount + bonus;
                            console.log(bonusResult);
                            console.log(`T√≠nh to√°n th√†nh c√¥ng: Amount: ${amount}, Bonus: ${bonus}, Total: ${totalAmount}`);

                            console.log(`Giao d·ªãch: ${trans.transactionID}, Amount: ${amount}, Bonus: ${bonus}, Total: ${totalAmount}`);

                            // C·∫≠p nh·∫≠t s·ªë d∆∞ ng∆∞·ªùi d√πng
                            user.balance += totalAmount;

                            // C·∫≠p nh·∫≠t t·ªïng s·ªë ti·ªÅn n·∫°p
                            user.tongnap = (user.tongnap || 0) + totalAmount;
                            user.tongnapthang = (user.tongnapthang || 0) + totalAmount;

                            // L∆∞u l·ªãch s·ª≠ giao d·ªãch
                            const historyData = new HistoryUser({
                                username,
                                madon: "null",
                                hanhdong: "C·ªông ti·ªÅn",
                                link: "",
                                tienhientai: tiencu,
                                tongtien: totalAmount,
                                tienconlai: user.balance,
                                createdAt: new Date(),
                                mota: bonus > 0
                                    ? `H·ªá th·ªëng ${bank.bank_name} t·ª± ƒë·ªông c·ªông th√†nh c√¥ng s·ªë ti·ªÅn ${totalAmount} v√† √°p d·ª•ng khuy·∫øn m√£i ${promo.percentBonus}%`
                                    : `H·ªá th·ªëng ${bank.bank_name} t·ª± ƒë·ªông c·ªông th√†nh c√¥ng s·ªë ti·ªÅn ${totalAmount}`,
                            });
                            await historyData.save();
                            await user.save();
                            // **Th√¥ng b√°o qua Telegram**
                            const taoluc = new Date();
                            const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
                            const telegramChatId = process.env.TELEGRAM_CHAT_ID;

                            if (telegramBotToken && telegramChatId) {
                                const telegramMessage =
                                    `üìå *N·∫†P TI·ªÄN TH√ÄNH C√îNG!*\n\n` +
                                    `üìå *Trans_id : * ${trans.transactionID || "khong co"}\n` +
                                    `üë§ *Kh√°ch h√†ng:* ${username}\n` +
                                    `üí∞ *S·ªë ti·ªÅn n·∫°p:* ${amount}\n` +
                                    `üéÅ *Khuy·∫øn m√£i:* ${bonus}\n` +
                                    `üîπ *T·ªïng c·ªông:* ${totalAmount}\n` +
                                    `‚è∞ *Th·ªùi gian:* ${taoluc.toLocaleString()}\n`;
                                try {
                                    await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                                        chat_id: telegramChatId,
                                        text: telegramMessage,
                                        parse_mode: "Markdown",
                                    });
                                    console.log("Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.");
                                } catch (telegramError) {
                                    console.error("L·ªói g·ª≠i th√¥ng b√°o Telegram:", telegramError.message);
                                }
                            }
                        } else {
                            console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y user: ${username}`);
                        }
                    } else if (trans.type !== 'IN') {
                        // N·∫øu l√† OUT ho·∫∑c lo·∫°i kh√°c, ch·ªâ l∆∞u giao d·ªãch, kh√¥ng c·ªông ti·ªÅn
                        if (!username) {
                            console.log(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y username trong m√¥ t·∫£: ${trans.description}`);
                        }
                    }
                    datetime = new Date().toISOString(); // L·∫•y th·ªùi gian hi·ªán t·∫°i
                    // X√°c ƒë·ªãnh tr·∫°ng th√°i giao d·ªãch
                    const transactionStatus = (trans.type === 'IN' && user) ? 'COMPLETED' : 'FAILED';

                    // L∆∞u giao d·ªãch v√†o b·∫£ng Transaction
                    await Transaction.create({
                        typeBank: bank.bank_name, // L∆∞u t√™n ng√¢n h√†ng
                        transactionID: trans.transactionID,
                        username: username || "unknown", // L∆∞u "unknown" n·∫øu kh√¥ng t√¨m th·∫•y username
                        amount: trans.amount, // L∆∞u s·ªë ti·ªÅn ƒë√£ chuy·ªÉn ƒë·ªïi
                        description: trans.description,
                        transactionDate: datetime,
                        type: trans.type,
                        status: transactionStatus, // Tr·∫°ng th√°i giao d·ªãch
                        note: (trans.type === 'IN' && user)
                            ? (bonus > 0
                                ? `H·ªá th·ªëng ${bank.bank_name} t·ª± ƒë·ªông c·ªông th√†nh c√¥ng s·ªë ti·ªÅn ${trans.amount} v√† √°p d·ª•ng khuy·∫øn m√£i ${promo?.percentBonus || 0}%`
                                : `H·ªá th·ªëng ${bank.bank_name} t·ª± ƒë·ªông c·ªông th√†nh c√¥ng s·ªë ti·ªÅn ${trans.amount}`)
                            : `H·ªá th·ªëng ${bank.bank_name} kh√¥ng th·ªÉ c·ªông ti·ªÅn v√¨ kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ho·∫∑c kh√¥ng ph·∫£i giao d·ªãch n·∫°p ti·ªÅn`,
                    });

                    if (user && trans.type === 'IN') {
                        if (bonus > 0) {
                            console.log(`üéÅ ${bank.bank_name.toUpperCase()}: +${amount} (+${bonus} KM) => ${username}`);
                        } else {
                            console.log(`‚úÖ ${bank.bank_name.toUpperCase()}: +${amount} cho ${username}`);
                        }
                    } else {
                        console.log(`‚ö†Ô∏è Giao d·ªãch ƒë∆∞·ª£c l∆∞u nh∆∞ng kh√¥ng c·ªông ti·ªÅn: ${trans.transactionID}`);
                    }
                }

            } catch (bankError) {
                console.error(`‚ùå L·ªói x·ª≠ l√Ω ${bank.bank_name}:`, bankError.message);
            }
        }

    } catch (error) {
        console.error('‚ùå Cron l·ªói:', error.message);
    }
});
