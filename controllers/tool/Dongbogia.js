const axios = require('axios');
const Service = require('../../models/server');
const SmmSv = require('../../models/SmmSv');

// // Controller ƒë·ªìng b·ªô gi√° d·ªãch v·ª• t·ª´ SMM provider (ch·ªâ cho admin)
// exports.syncPrices = async (req, res) => {
//   try {
//     // Ki·ªÉm tra quy·ªÅn admin
//     if (!req.user || req.user.role !== 'admin') {
//       return res.status(403).json({ success: false, message: 'Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph√©p ƒë·ªìng b·ªô gi√°!' });
//     }

//     // L·∫•y to√†n b·ªô d·ªãch v·ª• trong CSDL
//     const services = await Service.find({});
//     let updatedCount = 0;
//     let skippedCount = 0;
//     let errors = [];

//     // Duy·ªát qua t·ª´ng d·ªãch v·ª•
//     await Promise.all(
//       services.map(async (serviceItem) => {
//         try {
//           // L·∫•y c·∫•u h√¨nh API theo DomainSmm c·ªßa d·ªãch v·ª• hi·ªán t·∫°i
//           const smmSvConfig = await SmmSv.findOne({ name: serviceItem.DomainSmm });
//           if (!smmSvConfig || !smmSvConfig.url_api || !smmSvConfig.api_token) {
//             skippedCount++;
//             return;
//           }

//           // G·ªçi API b√™n th·ª© 3 ƒë·ªÉ l·∫•y danh s√°ch d·ªãch v·ª•
//           const apiResponse = await axios.post(smmSvConfig.url_api, {
//             key: smmSvConfig.api_token,
//             action: 'services',
//           });

//           if (!apiResponse.data || !Array.isArray(apiResponse.data)) {
//             skippedCount++;
//             return;
//           }

//           // T√¨m d·ªãch v·ª• c√≥ serviceId t∆∞∆°ng ·ª©ng trong k·∫øt qu·∫£ API
//           const apiService = apiResponse.data.find(
//             (s) => Number(s.service) === Number(serviceItem.serviceId)
//           );
//           if (!apiService) {
//             skippedCount++;
//             return;
//           }

//           // L·∫•y gi√° t·ª´ API v√† so s√°nh v·ªõi gi√° trong CSDL
//           const apiRate = apiService.rate * (smmSvConfig.tigia || 1);
//           const dbRate = serviceItem.rate;

//           // N·∫øu gi√° trong CSDL th·∫•p h∆°n gi√° API th√¨ c·∫≠p nh·∫≠t
//           if (dbRate < apiRate) {
//             // N·∫øu kh√¥ng c√≥ price_update th√¨ m·∫∑c ƒë·ªãnh tƒÉng 10%
//             const priceUpdatePercent = smmSvConfig.price_update || 1.1;
//             const newRate = Math.round(apiRate * priceUpdatePercent);
//             const oldRate = serviceItem.rate;
//             serviceItem.rate = newRate;
//             await serviceItem.save();
//             updatedCount++;

//             // G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ c·∫•u h√¨nh
//             const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
//             const telegramChatId = process.env.TELEGRAM_CHAT_ID;
//             if (telegramBotToken && telegramChatId) {
//               const telegramMessage = `üìå *C·∫≠p nh·∫≠t gi√°!*\n\n` +
//                 `üë§ *D·ªãch v·ª•:* ${serviceItem.name}\n` +
//                 `üîπ *Gi√° c≈©:* ${oldRate}\n` +
//                 `üîπ *Gi√° m·ªõi:* ${newRate}\n` +
//                 `üîπ *Site:* ${smmSvConfig.name}\n` +
//                 `üîπ *Th·ªùi gian:* ${new Date().toLocaleString()}\n`;
//               try {
//                 await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
//                   chat_id: telegramChatId,
//                   text: telegramMessage,
//                   parse_mode: "Markdown"
//                 });
//               } catch (telegramError) {
//                 // Kh√¥ng d·ª´ng l·∫°i n·∫øu l·ªói g·ª≠i Telegram
//               }
//             }
//           } else {
//             skippedCount++;
//           }
//         } catch (innerError) {
//           errors.push({ service: serviceItem.name, error: innerError.message });
//         }
//       })
//     );

//     return res.json({
//       success: true,
//       message: `ƒê·ªìng b·ªô gi√° ho√†n t·∫•t! ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} d·ªãch v·ª•, b·ªè qua ${skippedCount} d·ªãch v·ª•.`,
//       errors
//     });
//   } catch (error) {
//     return res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß khi ƒë·ªìng b·ªô gi√°!', error: error.message });
//   }
// };

// ƒê·ªìng b·ªô gi√° theo id SMM (ho·∫∑c t√™n provider)
exports.syncPricesBySmmId = async (req, res) => {
  try {
    if (!req.user || req.user.role !== 'admin') {
      return res.status(403).json({ success: false, message: 'Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph√©p ƒë·ªìng b·ªô gi√°!' });
    }

    const { smmId, smmName } = req.body;
    let smmQuery = {};
    if (smmId) smmQuery._id = smmId;
    if (smmName) smmQuery.name = smmName;

    // L·∫•y th√¥ng tin SMM provider
    const smmSvConfig = await SmmSv.findOne(smmQuery);
    if (!smmSvConfig) {
      return res.status(404).json({ success: false, message: 'Kh√¥ng t√¨m th·∫•y SMM provider!' });
    }

    // L·∫•y c√°c d·ªãch v·ª• thu·ªôc provider n√†y
    const services = await Service.find({ DomainSmm: smmSvConfig.name });
    if (!services.length) {
      return res.json({ success: false, message: 'Kh√¥ng c√≥ d·ªãch v·ª• n√†o thu·ªôc SMM provider n√†y!' });
    }

    // G·ªçi API l·∫•y danh s√°ch d·ªãch v·ª• t·ª´ provider
    const apiResponse = await axios.post(smmSvConfig.url_api, {
      key: smmSvConfig.api_token,
      action: 'services',
    });

    if (!apiResponse.data || !Array.isArray(apiResponse.data)) {
      return res.json({ success: false, message: 'Kh√¥ng l·∫•y ƒë∆∞·ª£c danh s√°ch d·ªãch v·ª• t·ª´ SMM provider!' });
    }

    let updatedCount = 0;
    let skippedCount = 0;
    let errors = [];

    await Promise.all(
      services.map(async (serviceItem) => {
        try {
          const apiService = apiResponse.data.find(
            (s) => Number(s.service) === Number(serviceItem.serviceId)
          );
          if (!apiService) {
            skippedCount++;
            return;
          }
          const apiRate = apiService.rate * (smmSvConfig.tigia || 25);
          const dbRate = serviceItem.rate;
          if (dbRate < apiRate) {
            const priceUpdatePercent = smmSvConfig.price_update || 1.1;
            const newRate = Math.round(apiRate * priceUpdatePercent);
            const oldRate = serviceItem.rate;
            serviceItem.rate = newRate;
            await serviceItem.save();
            updatedCount++;
            // G·ª≠i Telegram n·∫øu c√≥ c·∫•u h√¨nh
            const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
            const telegramChatId = process.env.TELEGRAM_CHAT_ID;
            if (telegramBotToken && telegramChatId) {
              const telegramMessage = `üìå *C·∫≠p nh·∫≠t gi√°!*\n\n` +
                `üë§ *D·ªãch v·ª•:* ${serviceItem.name}\n` +
                `üîπ *Gi√° c≈©:* ${oldRate}\n` +
                `üîπ *Gi√° m·ªõi:* ${newRate}\n` +
                `üîπ *Site:* ${smmSvConfig.name}\n` +
                `üîπ *Th·ªùi gian:* ${new Date().toLocaleString()}\n`;
              try {
                await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                  chat_id: telegramChatId,
                  text: telegramMessage,
                  parse_mode: "Markdown"
                });
              } catch (telegramError) {}
            }
          } else {
            skippedCount++;
          }
        } catch (innerError) {
          errors.push({ service: serviceItem.name, error: innerError.message });
        }
      })
    );

    return res.json({
      success: true,
      message: `ƒê·ªìng b·ªô gi√° ho√†n t·∫•t cho provider ${smmSvConfig.name}! ƒê√£ c·∫≠p nh·∫≠t ${updatedCount} d·ªãch v·ª•, b·ªè qua ${skippedCount} d·ªãch v·ª•.`,
      errors
    });
  } catch (error) {
    return res.status(500).json({ success: false, message: 'L·ªói m√°y ch·ªß khi ƒë·ªìng b·ªô gi√°!', error: error.message });
  }
};