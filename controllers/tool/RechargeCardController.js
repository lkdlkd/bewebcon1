const crypto = require("crypto");
const RechargeCard = require("../../models/RechangeCard");
const Transaction = require("../../models/History");
const User = require("../../models/User");
const axios = require("axios");
const FormData = require("form-data");
const cardModel = require("../../models/Card");
const ConfigCard = require("../../models/ConfigCard"); // Import m√¥ h√¨nh ConfigCard

/**
 * Controller c·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫ª c√†o
 */
exports.rechargeCardStatus = async () => {
    try {
        console.log("üîÑ ƒêang ki·ªÉm tra v√† c·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫ª c√†o...");

        // L·∫•y t·∫•t c·∫£ c√°c th·∫ª c√†o c√≥ tr·∫°ng th√°i 'pending'
        const pendingCards = await RechargeCard.find({ status: "pending" });
        if (!pendingCards.length) {
            console.log("Kh√¥ng c√≥ th·∫ª c√†o n√†o ƒëang ch·ªù x·ª≠ l√Ω.");
            return;
        }
        // L·∫•y c·∫•u h√¨nh t·ª´ ConfigCard
        const configCard = await ConfigCard.findOne();
        if (!configCard) {
            console.error("C·∫•u h√¨nh th·∫ª n·∫°p kh√¥ng t·ªìn t·∫°i");
            return;
        }
        // L·∫•y c·∫•u h√¨nh ƒë·ªëi t√°c t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
        const partner_id = configCard.PARTNER_ID;
        const partner_key = configCard.PARTNER_KEY;
        const apiUrl = `${configCard.API_URLCARD}/chargingws/v2`;
        console.log("C·∫•u h√¨nh ƒë·ªëi t√°c:", {
            partner_id,
            partner_key,
            apiUrl
        });
        for (const card of pendingCards) {
            try {
                // Ki·ªÉm tra n·∫øu card kh√¥ng t·ªìn t·∫°i ho·∫∑c thi·∫øu th√¥ng tin c·∫ßn thi·∫øt
                if (!card || !card.code || !card.serial) {
                    console.error(`Th·∫ª kh√¥ng h·ª£p l·ªá ho·∫∑c thi·∫øu th√¥ng tin: ${JSON.stringify(card)}`);
                    continue;
                }

                // T·∫°o ch·ªØ k√Ω MD5: partner_key + card.code + card.serial
                const sign = crypto
                    .createHash("md5")
                    .update(partner_key + card.code + card.serial)
                    .digest("hex");
                const command = "check";
                // T·∫°o form-data ƒë·ªÉ g·ª≠i ƒë·∫øn API ƒë·ªëi t√°c
                const formdata = new FormData();
                formdata.append("telco", card.type);
                formdata.append("code", card.code);
                formdata.append("serial", card.serial);
                formdata.append("amount", card.amount);
                formdata.append("request_id", card.request_id);
                formdata.append("partner_id", partner_id);
                formdata.append("sign", sign);
                formdata.append("command", command);
                // G·ª≠i y√™u c·∫ßu l√™n API ƒë·ªëi t√°c
                const statusCard = await axios.post(apiUrl, formdata, {
                    headers: formdata.getHeaders(),
                    timeout: 15000,
                });
                console.log("Tr·∫°ng th√°i tr·∫£ v·ªÅ t·ª´ API ƒë·ªëi t√°c:", statusCard.data);

                // Ki·ªÉm tra k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ API d·ª±a tr√™n status code
                const apiStatus = statusCard.data.status;
                const errorMessage = statusCard.data.message || "";

                if (typeof apiStatus !== "undefined") {
                    if (apiStatus === 1) {
                        // 1: Th·∫ª th√†nh c√¥ng ƒë√∫ng m·ªánh gi√°
                        const userData = await User.findOne({ username: card.username });
                        if (!userData) {
                            console.error(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: ${card.username}`);
                            continue;
                        }

                        // L·∫•y ph√≠ cao nh·∫•t t·ª´ b·∫£ng Card
                        const cardInfo = await cardModel.findOne({ telco: card.type }).sort({ fees: -1 });
                        if (!cardInfo) {
                            console.error(`Kh√¥ng t√¨m th·∫•y th√¥ng tin ph√≠ cho nh√† m·∫°ng: ${card.type}`);
                            continue;
                        }

                        const percent_card = Number(cardInfo.fees) || 0;
                        const chietkhau = card.amount - (card.amount * percent_card) / 100;

                        const note = `B·∫°n ƒë√£ n·∫°p th√†nh c√¥ng ${chietkhau.toLocaleString("vi-VN")} VNƒê t·ª´ th·∫ª c√†o. S·ªë d∆∞ t√†i kho·∫£n c·ªßa b·∫°n l√† ${(userData.balance + chietkhau).toLocaleString("vi-VN")} VNƒê`;

                        // T·∫°o giao d·ªãch m·ªõi (HistoryUser)
                        await Transaction.create({
                            username: userData.username,
                            madon: " ",
                            hanhdong: "n·∫°p ti·ªÅn th·∫ª c√†o",
                            tongtien: chietkhau,
                            tienhientai: userData.balance,
                            tienconlai: userData.balance + chietkhau,
                            mota: note,
                        });

                        // C·∫≠p nh·∫≠t th·∫ª c√†o v√† s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng
                        card.real_amount = chietkhau;
                        card.status = "success";
                        await card.save();

                        userData.balance += chietkhau;
                        userData.tongnapthang = (userData.tongnapthang || 0) + chietkhau;
                        userData.tongnap = (userData.tongnap || 0) + chietkhau;
                        await userData.save();

                        // G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ c·∫•u h√¨nh
                        const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
                        const telegramChatId = process.env.TELEGRAM_CHAT_ID;
                        if (telegramBotToken && telegramChatId) {
                            const telegramMessage =
                                `üìå *N·∫†P TI·ªÄN!*\n\n` +
                                `üë§ *Kh√°ch h√†ng:* ${card.username}\n` +
                                `üë§ *C·ªông ti·ªÅn:* n·∫°p th·∫ª th√†nh c√¥ng s·ªë ti·ªÅn ${chietkhau}.\n` +
                                `üîπ *T·∫°o l√∫c:* ${new Date().toLocaleString()}\n`;
                            try {
                                await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                                    chat_id: telegramChatId,
                                    text: telegramMessage,
                                });
                                console.log('Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.');
                            } catch (telegramError) {
                                console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', telegramError.message);
                            }
                        }
                    } else if (apiStatus === 2) {
                        // 2: Th·∫ª th√†nh c√¥ng sai m·ªánh gi√°
                        const userData = await User.findOne({ username: card.username });
                        if (!userData) {
                            console.error(`Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng: ${card.username}`);
                            continue;
                        }

                        // L·∫•y ph√≠ cao nh·∫•t t·ª´ b·∫£ng Card
                        const cardInfo = await cardModel.findOne({ telco: card.type }).sort({ fees: -1 });
                        const percent_card = cardInfo ? Number(cardInfo.fees) : 0;

                        // T√≠nh chi·∫øt kh·∫•u cho tr∆∞·ªùng h·ª£p sai m·ªánh gi√°
                        const chietkhau2 = (statusCard.data.value - (statusCard.data.value * percent_card / 100)) * 0.5;

                        const note = `Th·∫ª c√†o th√†nh c√¥ng nh∆∞ng sai m·ªánh gi√°. Ch·ªâ nh·∫≠n ${chietkhau2.toLocaleString("vi-VN")} VNƒê.`;

                        await Transaction.create({
                            username: userData.username,
                            madon: " ",
                            hanhdong: "n·∫°p ti·ªÅn th·∫ª c√†o - sai m·ªánh gi√°",
                            tongtien: chietkhau2,
                            tienhientai: userData.balance,
                            tienconlai: userData.balance + chietkhau2,
                            mota: note,
                        });

                        card.real_amount = chietkhau2;
                        card.status = "warning";
                        await card.save();

                        userData.balance += chietkhau2;
                        userData.tongnapthang = (userData.tongnapthang || 0) + chietkhau2;
                        userData.tongnap = (userData.tongnap || 0) + chietkhau2;
                        await userData.save();

                        // G·ª≠i th√¥ng b√°o Telegram n·∫øu c√≥ c·∫•u h√¨nh
                        const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
                        const telegramChatId = process.env.TELEGRAM_CHAT_ID;
                        if (telegramBotToken && telegramChatId) {
                            const telegramMessage = `üìå *C·ªông ti·ªÅn!*\n\n` +
                                `üë§ *Kh√°ch h√†ng:* ${card.username}\n` +
                                `üë§ *C·ªông ti·ªÅn:*  n·∫°p th·∫ª th√†nh c√¥ng s·ªë ti·ªÅn  ${chietkhau2} v√† sai m·ªánh gi√°.\n` +
                                `üîπ *T·∫°o l√∫c:* ${new Date().toLocaleString()}\n`;
                            try {
                                await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
                                    chat_id: telegramChatId,
                                    text: telegramMessage,
                                });
                                console.log('Th√¥ng b√°o Telegram ƒë√£ ƒë∆∞·ª£c g·ª≠i.');
                            } catch (telegramError) {
                                console.error('L·ªói g·ª≠i th√¥ng b√°o Telegram:', telegramError.message);
                            }
                        }
                    } else if (apiStatus === 3 || apiStatus === 101) {
                        // 3: Th·∫ª l·ªói
                        card.status = "failed";
                        card.real_amount = 0;
                        await card.save();
                    } else if (apiStatus === 4) {
                        // 4: H·ªá th·ªëng b·∫£o tr√¨
                        card.status = "maintenance";
                        await card.save();
                    } else if (apiStatus === 99) {
                        // 99: Th·∫ª ch·ªù x·ª≠ l√Ω - gi·ªØ nguy√™n tr·∫°ng th√°i pending
                        console.log(`Th·∫ª ${card.code} ƒëang ch·ªù x·ª≠ l√Ω.`);
                    } else if (apiStatus === 100) {
                        // 100: G·ª≠i th·∫ª th·∫•t b·∫°i - c√≥ l√Ω do ƒëi k√®m
                        card.status = "failed";
                        card.real_amount = 0;
                        card.mota = `G·ª≠i th·∫ª th·∫•t b·∫°i: ${errorMessage}`;
                        await card.save();
                    } else {
                        card.status = "failed";
                        card.real_amount = 0;
                        card.mota = `G·ª≠i th·∫ª th·∫•t b·∫°i: ${errorMessage}`;
                        await card.save();
                    }
                }
            } catch (err) {
                console.error(`L·ªói x·ª≠ l√Ω th·∫ª ${card.code}:`, err.message);
            }
        }

        console.log("‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫ª c√†o ho√†n t·∫•t");
    } catch (error) {
        console.error("‚ö† L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫ª c√†o:", error.message);
    }
};

// Cron job: ki·ªÉm tra tr·∫°ng th√°i th·∫ª c√†o m·ªói 30 gi√¢y
setInterval(async () => {
    console.log("‚è≥ Ch·∫°y cron job ki·ªÉm tra th·∫ª c√†o...");
    try {
        await exports.rechargeCardStatus();
    } catch (error) {
        console.error("L·ªói khi ch·∫°y rechargeCardStatus:", error);
    }
}, 30000); // 30,000 milliseconds = 30 secondss
